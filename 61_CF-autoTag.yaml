
RAF

DOESNT WORK YET - 20190806
mam error index out of range w wewnetrznym try catch statement



AWSTemplateFormatVersion: 2010-09-09
Description: 'Copy tags from AMI to EC2 & from EC2 to AMI'
#==ver.7=========================================
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "LambdaAutoTaggingPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:Describe*
                Resource: "*"
      RoleName: LambdaAutoTaggingRole2
#================================================
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - LambdaFunction
    Properties:
      Description: Rule for Lambda Func AutoTag
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - CreateImage
            - RunInstances
      Targets:
        - Arn: !Sub ${LambdaFunction.Arn}  # inside Rules>Targets>Name 'AutotaggingResources'
          Id: LambdaEventRuleName
# -   -   -   -   -   -   -   -   -   -   -   -   -
  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${AmazonCloudWatchEventRule.Arn} # inside lambda 'CloudWatch Events'
   #================================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          ec2 = boto3.resource('ec2')
          client = boto3.client('ec2')

          def lambda_handler(event, context):
              #print('Event: ' + str(event))
              print(json.dumps(event))

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']
                  src_ip = detail['sourceIPAddress']
                  principal = detail['userIdentity']['principalId']
                  user_type = detail['userIdentity']['type']
                  # ---------------------------------------------------------------------
                  if user_type == 'IAMUser':
                      user = detail['userIdentity']['userName']
                  else:
                      user = principal.split(': ')[1]
                  print(f'EVENT: {eventname} | REGION: {region} | USER: {user} | IP: {src_ip}')
                  # ---------------------------------------------------------------------
                  if eventname == 'RunInstances':     
                      
                      src_ami_id = event['detail']['requestParameters']['instancesSet']['items'][0]['imageId']
                      dst_ec2_id = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']
                      print(f'SOURCE AMI: {src_ami_id} | DESTINATION EC2: {dst_ec2_id}')
                      
                      ami_tags_to_copy = []
                      for each1 in client.describe_images(Owners=['self'])['Images']:
                          if src_ami_id == each1['ImageId']:
                              try:
                                  ami_tags_to_copy = each1['Tags']
                              except Exception as e:
                                  print(e)
                                  
                      print(f'TAGS: {ami_tags_to_copy}')
                      client.create_tags(Resources=[dst_ec2_id], Tags=ami_tags_to_copy)
                  # ---------------------------------------------------------------------            
                  elif eventname == 'CreateImage':

                      src_ec2_id = event['detail']['requestParameters']['instanceId']
                      dst_ami_id = event['detail']['responseElements']['imageId']
                      print(f'SOURCE EC2: {src_ec2_id} | DESTINATION AMI: {dst_ami_id}')
                      
                      ec2_tags_to_copy = []
                      for each2 in (client.describe_instances()['Reservations']):
                          if src_ec2_id == each2['Instances'][0]['InstanceId']:
                              try:
                                  ec2_tags_to_copy = each2['Instances'][0]['Tags']
                              except Exception as e:
                                  print(e)
                                  
                      print(f'TAGS: {ec2_tags_to_copy}')       
                      image = ec2.Image(dst_ami_id)
                      image.create_tags(Tags=ec2_tags_to_copy)
                  # ---------------------------------------------------------------------       
                  else:
                      print('Not supported action')

                  print('All Good - Tagging Done.')
                  return True

              except Exception as e:
                  print(f'Message: {str(e)}')
                  return False

      Role: !GetAtt 'LambdaRole.Arn'
      Description: This function copies tags from AMI to EC2 & from EC2 to AMI.
      FunctionName: AutotaggingResources
      Timeout: 10
      Handler: index.lambda_handler
      Runtime: python3.7
      MemorySize: 192
      #ReservedConcurrentExecutions: 50
